package alishev;

public class ClassesAndObjects {
    public static void main(String[] args) {
        Person person1 = new Person(); // создаем объект
        person1.age = 25; // инициализируем переменную
        person1.name = "Maksim"; // инициализируем переменную
        person1.hello(); //вызываем метод 1
        person1.speak(); //вызываем метод 2
        Person person2 = new Person(); // создаем объект
        person2.age = 26; // инициализируем переменную
        person2.name = "Helga"; // инициализируем переменную
        person2.hello(); //вызываем метод 1
        person2.speak(); //вызываем метод 2
        person2.married(); //вызываем метод 3
        //--------------------------------------------------------------------------------------------------------------
        Person person3 = new Person(); // создаём объект
        int years1 = person3.Old(); //присваиваем к person3 int Old
        System.out.println("Hi,i am " + years1 + " years old"); //выводим текст с присвоенной переменной
        System.out.println(" "); // просто отступ
        // -------------------------------------------------------------------------------------------------------------
        User user = new User(); // создаем объект
        user.setAge(25); //задаем значение как пользоваатель
        user.setName("Maxim"); //задаем значение как пользоваатель
        System.out.println("" + user.name + "," + user.age); // выводим текст с помощью геттеров
    }
}

class Person { //создаем новый класс
    String name; //создаем тестовую переменную
    int age; //создаём числовую переменную

    //------------------------------------------------Метод Return------------------------------------------------------

    /**
     * Оператор return используется в языке Java для выполнения явного возврата из метода.
     * Если метод возвращает значение void, то оператор return не является необходимым.
     */
    int Old() { // int означает тим возращаеммых данных при вызове метода
        int years = 18;//объявляем переменную и присваиваем значение
        return years;//возвращаем переменную years
    }

    //----------------------------------------------------------------------------------------------------------------------
    void speak() { //создаем метод который сможем вызывать в main
        System.out.println("My name is " + name + "," + " i am " + age + " ears old"); // задаем параметры новому методу
    }

    void hello() {
        System.out.println("Hello!");
    }

    void married() {
        System.out.println("I am Maksim's wife and we love each other");
    }
}
//-----------------------------------------Инкапсюляция. Сеттеры и геттеры----------------------------------------------

/**
 * Инкапсуляция  — это сокрытие реализации класса и отделение его внутреннего представления от внешнего (интерфейса).
 * При использовании объектно-ориентированного подхода не принято применять прямой доступ к свойствам какого-либо класса из методов других классов.
 * Геттеры – это методы, благодаря которым можно извлечь информацию из полей.
 * Сеттеры – это методы, который позволяют установку необходимой информации в определенное место.
 */
class User {
    int age;
    String name;

    public void setName(String userName) { // создаем сеттер
        if (userName.isEmpty()){
            System.out.println("Error");
        } else {
            name = userName;// приравниваем поле к значению из параметра
        }
    }

    public String getName() { // создаем геттер
        return name; // возвращаем значение при вызове
    }

    public void setAge(int userAge) { // создаем сеттер
        if (userAge<0){
            System.out.println("Error");
        } else
        age = userAge; // приравниваем поле к значению из параметра
    }

    public int getAge() { // создаем геттер
        return age; // возвращаем значение при вызове
    }
}
